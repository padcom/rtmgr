unit uPSI_jvuib;
{$I jvuib.inc}
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

type
(*----------------------------------------------------------------------------*)
  TPSImport_jvuib = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;


{ compile-time registration functions }
procedure SIRegister_TJvUIBConfig(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBEventThread(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBEvents(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBRepair(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBSecurity(CL: TPSPascalCompiler);
procedure SIRegister_TUserInfo(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBRestore(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBBackup(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBBackupRestore(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBService(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBScript(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBQuery(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBStatement(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBTransaction(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBDataBase(CL: TPSPascalCompiler);
procedure SIRegister_TMetaDataOptions(CL: TPSPascalCompiler);
procedure SIRegister_TJvUIBComponent(CL: TPSPascalCompiler);
procedure SIRegister_jvuib(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJvUIBConfig(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBEventThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBEvents(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBRepair(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBSecurity(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUserInfo(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBRestore(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBBackup(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBBackupRestore(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBService(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBScript(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBQuery(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBStatement(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBTransaction(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBDataBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaDataOptions(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJvUIBComponent(CL: TPSRuntimeClassImporter);
procedure RIRegister_jvuib(CL: TPSRuntimeClassImporter);

procedure Register;

implementation
uses
   Windows
  ,SyncObjs
  ,Contnrs
  ,jvuiblib
  ,jvuibase
  ,jvuibsqlparser
  ,jvuibconst
  ,jvuib
  ;

type
  TJvUIBStatementOverload = class(TJvUIBStatement)
  public
    procedure ReadBlobStream(const Index: Word; Stream: TStream); 
    procedure ReadBlobString(const Index: Word; var str: string);
    procedure ReadBlobVariant(const Index: Word; var Value: Variant);
    procedure ReadBlobNameStream(const name: string; Stream: TStream);
    procedure ReadBlobNameString(const name: string; var str: string);
    procedure ReadBlobNameVariant(const name: string; var Value: Variant);
    procedure ParamsSetBlobStream(const Index: Word; Stream: TStream);
    procedure ParamsSetBlobString(const Index: Word; var str: string);
    procedure ParamsSetBlobNameStream(const Name: string; Stream: TStream);
    procedure ParamsSetBlobNameString(const Name: string; var str: string);
  end;

  TJvUIBDatabaseOverload = class(TJvUIBDatabase)
  public
    procedure RegisterExceptionByID(Excpt: EUIBExceptionClass; ID: Integer);
    function RegisterExceptionByName(Excpt: EUIBExceptionClass; const Name: string): Integer;
  end;

  TJvUIBTransactionOverload = class(TJvUIBTransaction)
  public
    procedure RemoveDatabaseByClass(ADataBase: TJvUIBDataBase);
    procedure RemoveDatabaseByIndex(Index: Integer);
  end;

const
  iptR = uPSCompiler.iptR;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_jvuib]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBConfig(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBService', 'TJvUIBConfig') do
  with CL.AddClassN(CL.FindClass('TJvUIBService'),'TJvUIBConfig') do
  begin
    RegisterMethod('Procedure ShutdownDatabase( Options : TShutdownMode; Wait : Integer)');
    RegisterMethod('Procedure SetSweepInterval( Value : Integer)');
    RegisterMethod('Procedure SetDBSqlDialect( Value : Integer)');
    RegisterMethod('Procedure SetPageBuffers( Value : Integer)');
    RegisterMethod('Procedure ActivateShadow');
    RegisterMethod('Procedure BringDatabaseOnline');
    RegisterMethod('Procedure SetReserveSpace( Value : Boolean)');
    RegisterMethod('Procedure SetAsyncMode( Value : Boolean)');
    RegisterMethod('Procedure SetReadOnly( Value : Boolean)');
    RegisterProperty('DatabaseName', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBEventThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'TJvUIBEventThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'TJvUIBEventThread') do
  begin
    RegisterMethod('Constructor Create( Owner : TJvUIBEvents; Block : Integer; SyncMainThread : boolean)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBEvents(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBComponent', 'TJvUIBEvents') do
  with CL.AddClassN(CL.FindClass('TJvUIBComponent'),'TJvUIBEvents') do
  begin
    RegisterMethod('Procedure RegisterEvents');
    RegisterMethod('Procedure UnRegisterEvents');
    RegisterMethod('Procedure SetAutoRegister( const Value : boolean)');
    RegisterProperty('AutoRegister', 'boolean', iptrw);
    RegisterProperty('Database', 'TJvUIBDataBase', iptrw);
    RegisterProperty('Events', 'TStrings', iptrw);
    RegisterProperty('Registered', 'boolean', iptrw);
    RegisterProperty('SyncMainThread', 'boolean', iptrw);
    RegisterProperty('OnEvent', 'TOnEvent', iptrw);
    RegisterProperty('OnException', 'TOnExceptionEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBRepair(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBService', 'TJvUIBRepair') do
  with CL.AddClassN(CL.FindClass('TJvUIBService'),'TJvUIBRepair') do
  begin
    RegisterMethod('Procedure Run');
    RegisterProperty('Options', 'TRepairOptions', iptrw);
    RegisterProperty('Database', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBSecurity(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBService', 'TJvUIBSecurity') do
  with CL.AddClassN(CL.FindClass('TJvUIBService'),'TJvUIBSecurity') do
  begin
    RegisterMethod('Procedure AddUser');
    RegisterMethod('Procedure DeleteUser');
    RegisterMethod('Procedure ModifyUser');
    RegisterMethod('Procedure DisplayUser');
    RegisterMethod('Procedure DisplayUsers');
    RegisterProperty('UserInfo', 'TUserInfo Integer', iptr);
    RegisterProperty('UserInfoCount', 'Integer', iptr);
    RegisterProperty('Role', 'string', iptrw);
    RegisterProperty('User', 'string', iptrw);
    RegisterProperty('Pass', 'string', iptrw);
    RegisterProperty('FirstName', 'string', iptrw);
    RegisterProperty('MiddleName', 'string', iptrw);
    RegisterProperty('LastName', 'string', iptrw);
    RegisterProperty('UserID', 'Integer', iptrw);
    RegisterProperty('GroupID', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUserInfo(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TUserInfo') do
  with CL.AddClassN(CL.FindClass('TObject'),'TUserInfo') do
  begin
    RegisterProperty('UserName', 'string', iptrw);
    RegisterProperty('FirstName', 'string', iptrw);
    RegisterProperty('MiddleName', 'string', iptrw);
    RegisterProperty('LastName', 'string', iptrw);
    RegisterProperty('GroupID', 'Integer', iptrw);
    RegisterProperty('UserID', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBRestore(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBBackupRestore', 'TJvUIBRestore') do
  with CL.AddClassN(CL.FindClass('TJvUIBBackupRestore'),'TJvUIBRestore') do
  begin
    RegisterProperty('Options', 'TRestoreOptions', iptrw);
    RegisterProperty('PageSize', 'Cardinal', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBBackup(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBBackupRestore', 'TJvUIBBackup') do
  with CL.AddClassN(CL.FindClass('TJvUIBBackupRestore'),'TJvUIBBackup') do
  begin
    RegisterProperty('Options', 'TBackupOptions', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBBackupRestore(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBService', 'TJvUIBBackupRestore') do
  with CL.AddClassN(CL.FindClass('TJvUIBService'),'TJvUIBBackupRestore') do
  begin
    RegisterMethod('Procedure Run');
    RegisterProperty('BackupFiles', 'TStrings', iptrw);
    RegisterProperty('Database', 'string', iptrw);
    RegisterProperty('OnVerbose', 'TVerboseEvent', iptrw);
    RegisterProperty('Verbose', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBService(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBComponent', 'TJvUIBService') do
  with CL.AddClassN(CL.FindClass('TJvUIBComponent'),'TJvUIBService') do
  begin
    RegisterProperty('UserName', 'string', iptrw);
    RegisterProperty('PassWord', 'string', iptrw);
    RegisterProperty('Host', 'string', iptrw);
    RegisterProperty('Protocol', 'TUIBProtocol', iptrw);
    RegisterProperty('LibraryName', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBScript(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBComponent', 'TJvUIBScript') do
  with CL.AddClassN(CL.FindClass('TJvUIBComponent'),'TJvUIBScript') do
  begin
    RegisterMethod('Procedure ExecuteScript');
    RegisterProperty('Transaction', 'TJvUIBTransaction', iptrw);
    RegisterProperty('Script', 'TStrings', iptrw);
    RegisterProperty('AutoDDL', 'boolean', iptrw);
    RegisterProperty('OnParse', 'TOnParse', iptrw);
    RegisterProperty('OnComment', 'TOnComment', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBQuery(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBStatement', 'TJvUIBQuery') do
  with CL.AddClassN(CL.FindClass('TJvUIBStatement'),'TJvUIBQuery') do
  begin
    RegisterMethod('Procedure BuildStoredProc( const StoredProc : string; forSelect : boolean)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBStatement(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBComponent', 'TJvUIBStatement') do
  with CL.AddClassN(CL.FindClass('TJvUIBComponent'),'TJvUIBStatement') do
  begin
    RegisterMethod('Procedure Close( const Mode : TEndTransMode)');
    RegisterMethod('Procedure CloseCursor');
    RegisterMethod('Procedure FetchAll');
    RegisterMethod('Procedure Open( FetchFirst : boolean)');
    RegisterMethod('Procedure Prepare');
    RegisterMethod('Procedure Execute');
    RegisterMethod('Procedure ExecSQL');
    RegisterMethod('Procedure Next');
    RegisterMethod('Procedure Prior');
    RegisterMethod('Procedure Last');
    RegisterMethod('Procedure First');
    RegisterMethod('Procedure ReadBlobStream( const Index : Word; Stream : TStream)');
    RegisterMethod('Procedure ReadBlobString( const Index : Word; var str : string)');
    RegisterMethod('Procedure ReadBlobVariant( const Index : Word; var Value : Variant)');
    RegisterMethod('Procedure ReadBlobNameStream( const name : string; Stream : TStream)');
    RegisterMethod('Procedure ReadBlobNameString( const name : string; var str : string)');
    RegisterMethod('Procedure ReadBlobNameVariant( const name : string; var Value : Variant)');
    RegisterMethod('Procedure ParamsSetBlobStream( const Index : Word; Stream : TStream)');
    RegisterMethod('Procedure ParamsSetBlobString( const Index : Word; var str : string)');
    RegisterMethod('Procedure ParamsSetBlobNameStream( const Name : string; Stream : TStream)');
    RegisterMethod('Procedure ParamsSetBlobNameString( const Name : string; var str : string)');
    RegisterMethod('Function FieldBlobSize( const Index : Word) : Cardinal');
    RegisterMethod('Function ParamBlobSize( const Index : Word) : Cardinal');
    RegisterProperty('StHandle', 'IscStmtHandle', iptr);
    RegisterProperty('Fields', 'TSQLResult', iptr);
    RegisterProperty('Params', 'TSQLParams', iptr);
    RegisterProperty('CursorName', 'string', iptr);
    RegisterProperty('CurrentState', 'TQueryState', iptr);
    RegisterProperty('Eof', 'boolean', iptr);
    RegisterProperty('Bof', 'boolean', iptr);
    RegisterProperty('ParseParams', 'boolean', iptrw);
    RegisterProperty('Plan', 'string', iptr);
    RegisterProperty('StatementType', 'TUIBStatementType', iptr);
    RegisterProperty('RowsAffected', 'Cardinal', iptr);
    RegisterProperty('UseCursor', 'boolean', iptrw);
    RegisterProperty('SQL', 'TStrings', iptrw);
    RegisterProperty('Transaction', 'TJvUIBTransaction', iptrw);
    RegisterProperty('DataBase', 'TJvUIBDataBase', iptrw);
    RegisterProperty('OnError', 'TEndTransMode', iptrw);
    RegisterProperty('CachedFetch', 'boolean', iptrw);
    RegisterProperty('FetchBlobs', 'boolean', iptrw);
    RegisterProperty('BufferChunks', 'Cardinal', iptrw);
    RegisterProperty('OnClose', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBTransaction(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBComponent', 'TJvUIBTransaction') do
  with CL.AddClassN(CL.FindClass('TJvUIBComponent'),'TJvUIBTransaction') do
  begin
    RegisterMethod('Procedure AddDataBase( ADataBase : TJvUIBDataBase)');
    RegisterMethod('Procedure RemoveDatabaseByClass( ADataBase : TJvUIBDataBase)');
    RegisterMethod('Procedure RemoveDatabaseByIndex( Index : Integer)');
    RegisterMethod('Procedure StartTransaction');
    RegisterMethod('Procedure Commit');
    RegisterMethod('Procedure CommitRetaining');
    RegisterMethod('Procedure RollBack');
    RegisterMethod('Procedure RollBackRetaining');
    RegisterMethod('Procedure ExecuteImmediate( const sql : string)');
{$IFDEF IB71_UP}
    RegisterMethod('Procedure SavepointRelease( const Name : string)');
    RegisterMethod('Procedure SavepointRollback( const Name : string; Option : Word)');
    RegisterMethod('Procedure SavepointStart( const Name : string)');
{$ENDIF}
    RegisterProperty('InTransaction', 'boolean', iptr);
    RegisterProperty('TrHandle', 'IscTrHandle', iptr);
    RegisterProperty('Statements', 'TJvUIBStatement Integer', iptr);
    RegisterProperty('StatementsCount', 'Integer', iptr);
    RegisterProperty('Databases', 'TJvUIBDataBase Integer', iptr);
    RegisterProperty('DatabasesCount', 'Integer', iptr);
    RegisterProperty('DataBase', 'TJvUIBDataBase', iptrw);
    RegisterProperty('Options', 'TTransParams', iptrw);
    RegisterProperty('LockRead', 'string', iptrw);
    RegisterProperty('LockWrite', 'string', iptrw);
    RegisterProperty('OnStartTransaction', 'TNotifyEvent', iptrw);
    RegisterProperty('OnEndTransaction', 'TOnEndTransaction', iptrw);
    RegisterProperty('AutoRetain', 'boolean', iptrw);
    RegisterProperty('AutoStart', 'boolean', iptrw);
    RegisterProperty('AutoStop', 'boolean', iptrw);
    RegisterProperty('DefaultAction', 'TEndTransMode', iptrw);
{$IFDEF FB20_UP}
    RegisterProperty('LockTimeout', 'Word', iptrw);
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBDataBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvUIBComponent', 'TJvUIBDataBase') do
  with CL.AddClassN(CL.FindClass('TJvUIBComponent'),'TJvUIBDataBase') do
  begin
    RegisterMethod('Procedure ExecuteImmediate( const Statement : string)');
    RegisterMethod('Procedure ClearExceptions');
    RegisterMethod('Procedure RegisterExceptionByID( Excpt : EUIBExceptionClass; ID : Integer)');
    RegisterMethod('Function RegisterExceptionByName( Excpt : EUIBExceptionClass; const Name : string) : Integer');
    RegisterMethod('Procedure UnRegisterException( Number : Integer)');
    RegisterMethod('Procedure UnRegisterExceptions( Excpt : EUIBExceptionClass)');
    RegisterMethod('Procedure CreateDatabase( PageSize : Integer)');
    RegisterMethod('Function GetMetadata( Refresh : boolean) : TObject');
    RegisterMethod('Procedure ActiveAllTriggers');
    RegisterMethod('Procedure DeactiveAllTriggers');
    RegisterMethod('Procedure RecomputeSelectivityIndices');
    RegisterMethod('Procedure RecompileAllProcedures');
    RegisterMethod('Procedure RecompileAllTriggers');
    RegisterProperty('DbHandle', 'IscDbHandle', iptrw);
    RegisterProperty('IsHandleShared', 'boolean', iptr);
    RegisterProperty('Transactions', 'TJvUIBTransaction Cardinal', iptr);
    RegisterProperty('TransactionsCount', 'Cardinal', iptr);
    RegisterProperty('Lib', 'TUIBLibrary', iptr);
    RegisterProperty('InfoReads', 'Integer', iptr);
    RegisterProperty('InfoWrites', 'Integer', iptr);
    RegisterProperty('InfoFetches', 'Integer', iptr);
    RegisterProperty('InfoMarks', 'Integer', iptr);
    RegisterProperty('InfoPageSize', 'Integer', iptr);
    RegisterProperty('InfoNumBuffers', 'Integer', iptr);
    RegisterProperty('InfoSetPageBuffers', 'Integer', iptr);
    RegisterProperty('InfoCurrentMemory', 'Integer', iptr);
    RegisterProperty('InfoMaxMemory', 'Integer', iptr);
    RegisterProperty('InfoAttachmentId', 'Integer', iptr);
    RegisterProperty('InfoOdsVersion', 'Integer', iptr);
    RegisterProperty('InfoOdsMinorVersion', 'Integer', iptr);
    RegisterProperty('InfoAllocation', 'Integer', iptr);
    RegisterProperty('InfoSweepInterval', 'Integer', iptr);
    RegisterProperty('InfoNoReserve', 'boolean', iptr);
    RegisterProperty('InfoForcedWrites', 'boolean', iptr);
    RegisterProperty('InfoPageErrors', 'Integer', iptr);
    RegisterProperty('InfoBPageErrors', 'Integer', iptr);
    RegisterProperty('InfoRecordErrors', 'Integer', iptr);
    RegisterProperty('InfoDPageErrors', 'Integer', iptr);
    RegisterProperty('InfoIPageErrors', 'Integer', iptr);
    RegisterProperty('InfoPPageErrors', 'Integer', iptr);
    RegisterProperty('InfoTPageErrors', 'Integer', iptr);
    RegisterProperty('InfoDbSqlDialect', 'Integer', iptr);
    RegisterProperty('InfoDbReadOnly', 'boolean', iptr);
    RegisterProperty('InfoDbSizeInPages', 'Integer', iptr);
    RegisterProperty('InfoDbFileName', 'string', iptr);
    RegisterProperty('InfoDbSiteName', 'string', iptr);
    RegisterProperty('InfoImplementation', 'Integer', iptr);
    RegisterProperty('InfoBaseLevel', 'Integer', iptr);
    RegisterProperty('InfoVersion', 'string', iptr);
    RegisterProperty('InfoReadSeqCount', 'Integer', iptr);
    RegisterProperty('InfoReadIdxCount', 'Integer', iptr);
    RegisterProperty('InfoUpdateCount', 'Integer', iptr);
    RegisterProperty('InfoInsertCount', 'Integer', iptr);
    RegisterProperty('InfoDeleteCount', 'Integer', iptr);
    RegisterProperty('InfoBackoutCount', 'Integer', iptr);
    RegisterProperty('InfoPurgeCount', 'Integer', iptr);
    RegisterProperty('InfoExpungeCount', 'Integer', iptr);
    RegisterProperty('InfoLimbo', 'integer', iptr);
    RegisterProperty('InfoUserNames', 'Integer', iptr);
{$IFDEF FB102ORYF867}
    RegisterProperty('InfoOldestTransaction', 'Integer', iptr);
    RegisterProperty('InfoOldestActive', 'Integer', iptr);
    RegisterProperty('InfoOldestSnapshot', 'Integer', iptr);
    RegisterProperty('InfoNextTransaction', 'Integer', iptr);
    RegisterProperty('InfoDbProvider', 'Integer', iptr);
    RegisterProperty('InfoDbClass', 'Integer', iptr);
    RegisterProperty('InfoAttCharset', 'Integer', iptr);
    RegisterProperty('InfoFirebirdVersion', 'string', iptr);
    RegisterProperty('InfoActiveTransactions', 'Integer', iptr);
{$ENDIF}
{$IFDEF IB7_UP}
    RegisterProperty('InfoDbReads', 'Integer', iptr);
    RegisterProperty('InfoDbWrites', 'Integer', iptr);
    RegisterProperty('InfoDbFetches', 'Integer', iptr);
    RegisterProperty('InfoDbMarks', 'Integer', iptr);
    RegisterProperty('InfoDbGroupCommit', 'boolean', iptr);
{$ENDIF}
{$IFDEF IB71_UP}
    RegisterProperty('InfoAttCharset', 'Integer', iptr);
    RegisterProperty('InfoSvrMinVer', 'Integer', iptr);
{$ENDIF}
    RegisterProperty('Params', 'TStrings', iptrw);
    RegisterProperty('DatabaseName', 'string', iptrw);
    RegisterProperty('SQLDialect', 'Integer', iptrw);
    RegisterProperty('CharacterSet', 'TCharacterSet', iptrw);
    RegisterProperty('UserName', 'string', iptrw);
    RegisterProperty('PassWord', 'string', iptrw);
    RegisterProperty('LibraryName', 'string', iptrw);
    RegisterProperty('AfterConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('AfterDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('OnConnectionLost', 'TNotifyEvent', iptrw);
    RegisterProperty('SegmentSize', 'Word', iptrw);
    RegisterProperty('MetaDataOptions', 'TMetaDataOptions', iptr);
    RegisterProperty('Shutdown', 'TShutdownOptions', iptrw);
    RegisterProperty('Connected', 'boolean', iptrw);
    RegisterProperty('Role', 'string', iptrw);
    RegisterProperty('OnInfoReadSeqCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoReadIdxCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoUpdateCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoInsertCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoDeleteCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoBackoutCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoPurgeCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoExpungeCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoActiveTransactions', 'TOnInfoIntegerCount', iptrw);
    RegisterProperty('OnInfoLimbo', 'TOnInfoIntegerCount', iptrw);
    RegisterProperty('OnInfoUserNames', 'TOnInfoStringCount', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaDataOptions(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TMetaDataOptions') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TMetaDataOptions') do
  begin
    RegisterMethod('Constructor Create');
    RegisterProperty('Objects', 'TOIDDatabases', iptrw);
    RegisterProperty('Tables', 'TOIDTables', iptrw);
    RegisterProperty('Views', 'TOIDViews', iptrw);
    RegisterProperty('Procedures', 'TOIDProcedures', iptrw);
    RegisterProperty('UDFs', 'TOIDUDFs', iptrw);
    RegisterProperty('SysInfos', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvUIBComponent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TJvUIBComponent') do
{$IFDEF UIB_NO_COMPONENT}
  with CL.AddClassN(CL.FindClass('TObject'),'TJvUIBComponent') do
{$ELSE}
  with CL.AddClassN(CL.FindClass('TComponent'),'TJvUIBComponent') do
{$ENDIF}
  begin
{$IFDEF UIBTHREADSAFE}
    RegisterMethod('Procedure Lock');
    RegisterMethod('Procedure UnLock');
{$ENDIF}
{$IFDEF UIB_NO_COMPONENT}
    RegisterMethod('Constructor Create');
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_jvuib(CL: TPSPascalCompiler);
begin
  SIRegister_TJvUIBComponent(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvUIBTransaction');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvUIBQuery');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvUIBStatement');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvUIBDataBase');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvUIBEvents');
  SIRegister_TMetaDataOptions(CL);
  CL.AddTypeS('TShutdownOption', '( sdCache, sdAttachment, sdTransaction, sdFor'
   +'ce )');
  CL.AddTypeS('TShutdownOptions', 'set of TShutdownOption');
  CL.AddTypeS('TTableOperation', 'record TableId : Word; Count : Integer; end');
  CL.AddTypeS('TOnInfoTableOpCount', 'Procedure ( Sender : TObject; var TableOp'
   +' : TTableOperation)');
  CL.AddTypeS('TOnInfoIntegerCount', 'Procedure ( Sender : TObject; Value : Int'
   +'eger)');
  CL.AddTypeS('TOnInfoStringCount', 'Procedure ( Sender : TObject; Value : stri'
   +'ng)');
  SIRegister_TJvUIBDataBase(CL);
  CL.AddTypeS('TEndTransMode', '( etmDefault, etmStayIn, etmCommit, etmCommitRe'
   +'taining, etmRollback, etmRollbackRetaining )');
  CL.AddTypeS('TQueryState', '( qsDataBase, qsTransaction, qsExecImme, qsStatem'
   +'ent, qsPrepare, qsExecute )');
  CL.AddTypeS('TTransParam', '( tpConsistency, tpConcurrency, tpShared, tpProte'
   +'cted, tpExclusive, tpWait, tpNowait, tpRead, tpWrite, tpLockRead, tpLockWr'
   +'ite, tpVerbTime, tpCommitTime, tpIgnoreLimbo, tpReadCommitted, tpAutoCommi'
   +'t, tpRecVersion, tpNoRecVersion, tpRestartRequests, tpNoAutoUndo'
{$IFDEF FB20_UP}
   +', tpLockTimeout'
{$ENDIF}
   +')');
  CL.AddTypeS('TTransParams', 'set of TTransParam');
  CL.AddTypeS('TOnEndTransaction', 'Procedure ( Sender : TObject; var Mode : TE'
   +'ndTransMode)');
  SIRegister_TJvUIBTransaction(CL);
  SIRegister_TJvUIBStatement(CL);
  SIRegister_TJvUIBQuery(CL);
  CL.AddTypeS('TOnParse', 'Procedure ( Sender : TObject; NodeType : TSQLStateme'
   +'nt; const Statement : string)');
  SIRegister_TJvUIBScript(CL);
  CL.AddTypeS('TUIBProtocol', '( proLocalHost, proTCPIP, proNetBEUI )');
  SIRegister_TJvUIBService(CL);
  CL.AddTypeS('TVerboseEvent', 'Procedure ( Sender : TObject; Message : string)');
  SIRegister_TJvUIBBackupRestore(CL);
  CL.AddTypeS('TBackupOption', '( boIgnoreChecksums, boIgnoreLimbo, boMetadataO'
   +'nly, boNoGarbageCollection, boOldMetadataDesc, boNonTransportable, boConve'
   +'rtExtTables, boExpand )');
  CL.AddTypeS('TBackupOptions', 'set of TBackupOption');
  SIRegister_TJvUIBBackup(CL);
  CL.AddTypeS('TRestoreOption', '( roDeactivateIndexes, roNoShadow, roNoValidit'
   +'yCheck, roOneRelationAtATime, roReplace, roCreateNewDB, roUseAllSpace'
{$IFDEF IB71_UP}
   +', roValidate'
{$ENDIF}
   +')');
  CL.AddTypeS('TRestoreOptions', 'set of TRestoreOption');
  SIRegister_TJvUIBRestore(CL);
  CL.AddTypeS('TSecurityAction', '( saAddUser, saDeleteUser, saModifyUser, saDi'
   +'splayUser, saDisplayUsers )');
  CL.AddTypeS('TSecurityParam', '( spRole, spUser, spPass, spFirstName, spMiddl'
   +'eName, spLastName, spUserID, spGroupID )');
  CL.AddTypeS('TSecurityParams', 'set of TSecurityParam');
  SIRegister_TUserInfo(CL);
  SIRegister_TJvUIBSecurity(CL);
  CL.AddTypeS('TRepairOption', '( roValidateDB, roValidateFull, roSweepDB, roMe'
   +'ndDB, roListLimboTrans, roCheckDB, roIgnoreChecksum, roKillShadows )');
  CL.AddTypeS('TRepairOptions', 'set of TRepairOption');
  SIRegister_TJvUIBRepair(CL);
  CL.AddTypeS('TOnEvent', 'Procedure ( Sender : TObject; const EventName : stri'
   +'ng; Count : Integer; var Cancel : boolean)');
  CL.AddTypeS('TOnExceptionEvent', 'Procedure ( Error : EException)');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJvUIBEventThread');
  SIRegister_TJvUIBEvents(CL);
  SIRegister_TJvUIBEventThread(CL);
  CL.AddTypeS('TShutdownMode', '( smForced, smDenyTransaction, smDenyAttachment'
   +' )');
  SIRegister_TJvUIBConfig(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TJvUIBConfigDatabaseName_W(Self: TJvUIBConfig; const T: String);
begin Self.DatabaseName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBConfigDatabaseName_R(Self: TJvUIBConfig; var T: String);
begin T := Self.DatabaseName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsOnException_W(Self: TJvUIBEvents; const T: TOnExceptionEvent);
begin Self.OnException := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsOnException_R(Self: TJvUIBEvents; var T: TOnExceptionEvent);
begin T := Self.OnException; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsOnEvent_W(Self: TJvUIBEvents; const T: TOnEvent);
begin Self.OnEvent := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsOnEvent_R(Self: TJvUIBEvents; var T: TOnEvent);
begin T := Self.OnEvent; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsSyncMainThread_W(Self: TJvUIBEvents; const T: boolean);
begin Self.SyncMainThread := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsSyncMainThread_R(Self: TJvUIBEvents; var T: boolean);
begin T := Self.SyncMainThread; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsRegistered_W(Self: TJvUIBEvents; const T: boolean);
begin Self.Registered := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsRegistered_R(Self: TJvUIBEvents; var T: boolean);
begin T := Self.Registered; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsEvents_W(Self: TJvUIBEvents; const T: TStrings);
begin Self.Events := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsEvents_R(Self: TJvUIBEvents; var T: TStrings);
begin T := Self.Events; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsDatabase_W(Self: TJvUIBEvents; const T: TJvUIBDataBase);
begin Self.Database := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsDatabase_R(Self: TJvUIBEvents; var T: TJvUIBDataBase);
begin T := Self.Database; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsAutoRegister_W(Self: TJvUIBEvents; const T: boolean);
begin Self.AutoRegister := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBEventsAutoRegister_R(Self: TJvUIBEvents; var T: boolean);
begin T := Self.AutoRegister; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRepairDatabase_W(Self: TJvUIBRepair; const T: string);
begin Self.Database := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRepairDatabase_R(Self: TJvUIBRepair; var T: string);
begin T := Self.Database; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRepairOptions_W(Self: TJvUIBRepair; const T: TRepairOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRepairOptions_R(Self: TJvUIBRepair; var T: TRepairOptions);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityGroupID_W(Self: TJvUIBSecurity; const T: Integer);
begin Self.GroupID := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityGroupID_R(Self: TJvUIBSecurity; var T: Integer);
begin T := Self.GroupID; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityUserID_W(Self: TJvUIBSecurity; const T: Integer);
begin Self.UserID := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityUserID_R(Self: TJvUIBSecurity; var T: Integer);
begin T := Self.UserID; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityLastName_W(Self: TJvUIBSecurity; const T: string);
begin Self.LastName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityLastName_R(Self: TJvUIBSecurity; var T: string);
begin T := Self.LastName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityMiddleName_W(Self: TJvUIBSecurity; const T: string);
begin Self.MiddleName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityMiddleName_R(Self: TJvUIBSecurity; var T: string);
begin T := Self.MiddleName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityFirstName_W(Self: TJvUIBSecurity; const T: string);
begin Self.FirstName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityFirstName_R(Self: TJvUIBSecurity; var T: string);
begin T := Self.FirstName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityPass_W(Self: TJvUIBSecurity; const T: string);
begin Self.Pass := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityPass_R(Self: TJvUIBSecurity; var T: string);
begin T := Self.Pass; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityUser_W(Self: TJvUIBSecurity; const T: string);
begin Self.User := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityUser_R(Self: TJvUIBSecurity; var T: string);
begin T := Self.User; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityRole_W(Self: TJvUIBSecurity; const T: string);
begin Self.Role := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityRole_R(Self: TJvUIBSecurity; var T: string);
begin T := Self.Role; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityUserInfoCount_R(Self: TJvUIBSecurity; var T: Integer);
begin T := Self.UserInfoCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBSecurityUserInfo_R(Self: TJvUIBSecurity; var T: TUserInfo; const t1: Integer);
begin T := Self.UserInfo[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserID_W(Self: TUserInfo; const T: Integer);
Begin Self.UserID := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserID_R(Self: TUserInfo; var T: Integer);
Begin T := Self.UserID; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoGroupID_W(Self: TUserInfo; const T: Integer);
Begin Self.GroupID := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoGroupID_R(Self: TUserInfo; var T: Integer);
Begin T := Self.GroupID; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoLastName_W(Self: TUserInfo; const T: string);
Begin Self.LastName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoLastName_R(Self: TUserInfo; var T: string);
Begin T := Self.LastName; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoMiddleName_W(Self: TUserInfo; const T: string);
Begin Self.MiddleName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoMiddleName_R(Self: TUserInfo; var T: string);
Begin T := Self.MiddleName; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoFirstName_W(Self: TUserInfo; const T: string);
Begin Self.FirstName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoFirstName_R(Self: TUserInfo; var T: string);
Begin T := Self.FirstName; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserName_W(Self: TUserInfo; const T: string);
Begin Self.UserName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserName_R(Self: TUserInfo; var T: string);
Begin T := Self.UserName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRestorePageSize_W(Self: TJvUIBRestore; const T: Cardinal);
begin Self.PageSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRestorePageSize_R(Self: TJvUIBRestore; var T: Cardinal);
begin T := Self.PageSize; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRestoreOptions_W(Self: TJvUIBRestore; const T: TRestoreOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBRestoreOptions_R(Self: TJvUIBRestore; var T: TRestoreOptions);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupOptions_W(Self: TJvUIBBackup; const T: TBackupOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupOptions_R(Self: TJvUIBBackup; var T: TBackupOptions);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreVerbose_W(Self: TJvUIBBackupRestore; const T: boolean);
begin Self.Verbose := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreVerbose_R(Self: TJvUIBBackupRestore; var T: boolean);
begin T := Self.Verbose; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreOnVerbose_W(Self: TJvUIBBackupRestore; const T: TVerboseEvent);
begin Self.OnVerbose := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreOnVerbose_R(Self: TJvUIBBackupRestore; var T: TVerboseEvent);
begin T := Self.OnVerbose; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreDatabase_W(Self: TJvUIBBackupRestore; const T: String);
begin Self.Database := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreDatabase_R(Self: TJvUIBBackupRestore; var T: String);
begin T := Self.Database; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreBackupFiles_W(Self: TJvUIBBackupRestore; const T: TStrings);
begin Self.BackupFiles := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBBackupRestoreBackupFiles_R(Self: TJvUIBBackupRestore; var T: TStrings);
begin T := Self.BackupFiles; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceLibraryName_W(Self: TJvUIBService; const T: string);
begin Self.LibraryName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceLibraryName_R(Self: TJvUIBService; var T: string);
begin T := Self.LibraryName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceProtocol_W(Self: TJvUIBService; const T: TUIBProtocol);
begin Self.Protocol := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceProtocol_R(Self: TJvUIBService; var T: TUIBProtocol);
begin T := Self.Protocol; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceHost_W(Self: TJvUIBService; const T: string);
begin Self.Host := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceHost_R(Self: TJvUIBService; var T: string);
begin T := Self.Host; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServicePassWord_W(Self: TJvUIBService; const T: string);
begin Self.PassWord := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServicePassWord_R(Self: TJvUIBService; var T: string);
begin T := Self.PassWord; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceUserName_W(Self: TJvUIBService; const T: string);
begin Self.UserName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBServiceUserName_R(Self: TJvUIBService; var T: string);
begin T := Self.UserName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptOnComment_W(Self: TJvUIBScript; const T: TOnComment);
begin Self.OnComment := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptOnComment_R(Self: TJvUIBScript; var T: TOnComment);
begin T := Self.OnComment; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptOnParse_W(Self: TJvUIBScript; const T: TOnParse);
begin Self.OnParse := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptOnParse_R(Self: TJvUIBScript; var T: TOnParse);
begin T := Self.OnParse; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptAutoDDL_W(Self: TJvUIBScript; const T: boolean);
begin Self.AutoDDL := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptAutoDDL_R(Self: TJvUIBScript; var T: boolean);
begin T := Self.AutoDDL; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptScript_W(Self: TJvUIBScript; const T: TStrings);
begin Self.Script := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptScript_R(Self: TJvUIBScript; var T: TStrings);
begin T := Self.Script; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptTransaction_W(Self: TJvUIBScript; const T: TJvUIBTransaction);
begin Self.Transaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBScriptTransaction_R(Self: TJvUIBScript; var T: TJvUIBTransaction);
begin T := Self.Transaction; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementOnClose_W(Self: TJvUIBStatement; const T: TNotifyEvent);
begin Self.OnClose := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementOnClose_R(Self: TJvUIBStatement; var T: TNotifyEvent);
begin T := Self.OnClose; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementBufferChunks_W(Self: TJvUIBStatement; const T: Cardinal);
begin Self.BufferChunks := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementBufferChunks_R(Self: TJvUIBStatement; var T: Cardinal);
begin T := Self.BufferChunks; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementFetchBlobs_W(Self: TJvUIBStatement; const T: boolean);
begin Self.FetchBlobs := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementFetchBlobs_R(Self: TJvUIBStatement; var T: boolean);
begin T := Self.FetchBlobs; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementCachedFetch_W(Self: TJvUIBStatement; const T: boolean);
begin Self.CachedFetch := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementCachedFetch_R(Self: TJvUIBStatement; var T: boolean);
begin T := Self.CachedFetch; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementOnError_W(Self: TJvUIBStatement; const T: TEndTransMode);
begin Self.OnError := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementOnError_R(Self: TJvUIBStatement; var T: TEndTransMode);
begin T := Self.OnError; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementDataBase_W(Self: TJvUIBStatement; const T: TJvUIBDataBase);
begin Self.DataBase := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementDataBase_R(Self: TJvUIBStatement; var T: TJvUIBDataBase);
begin T := Self.DataBase; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementTransaction_W(Self: TJvUIBStatement; const T: TJvUIBTransaction);
begin Self.Transaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementTransaction_R(Self: TJvUIBStatement; var T: TJvUIBTransaction);
begin T := Self.Transaction; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementSQL_W(Self: TJvUIBStatement; const T: TStrings);
begin Self.SQL := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementSQL_R(Self: TJvUIBStatement; var T: TStrings);
begin T := Self.SQL; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementUseCursor_W(Self: TJvUIBStatement; const T: boolean);
begin Self.UseCursor := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementUseCursor_R(Self: TJvUIBStatement; var T: boolean);
begin T := Self.UseCursor; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementRowsAffected_R(Self: TJvUIBStatement; var T: Cardinal);
begin T := Self.RowsAffected; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementStatementType_R(Self: TJvUIBStatement; var T: TUIBStatementType);
begin T := Self.StatementType; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementPlan_R(Self: TJvUIBStatement; var T: string);
begin T := Self.Plan; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementParseParams_W(Self: TJvUIBStatement; const T: boolean);
begin Self.ParseParams := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementParseParams_R(Self: TJvUIBStatement; var T: boolean);
begin T := Self.ParseParams; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementBof_R(Self: TJvUIBStatement; var T: boolean);
begin T := Self.Bof; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementEof_R(Self: TJvUIBStatement; var T: boolean);
begin T := Self.Eof; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementCurrentState_R(Self: TJvUIBStatement; var T: TQueryState);
begin T := Self.CurrentState; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementCursorName_R(Self: TJvUIBStatement; var T: string);
begin T := Self.CursorName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementParams_R(Self: TJvUIBStatement; var T: TSQLParams);
begin T := Self.Params; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementFields_R(Self: TJvUIBStatement; var T: TSQLResult);
begin T := Self.Fields; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBStatementStHandle_R(Self: TJvUIBStatement; var T: IscStmtHandle);
begin T := Self.StHandle; end;

{$IFDEF FB20_UP}
(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionLockTimeout_W(Self: TJvUIBTransaction; const T: Word);
begin Self.LockTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionLockTimeout_R(Self: TJvUIBTransaction; var T: Word);
begin T := Self.LockTimeout; end;
{$ENDIF}

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionDefaultAction_W(Self: TJvUIBTransaction; const T: TEndTransMode);
begin Self.DefaultAction := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionDefaultAction_R(Self: TJvUIBTransaction; var T: TEndTransMode);
begin T := Self.DefaultAction; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionAutoStop_W(Self: TJvUIBTransaction; const T: boolean);
begin Self.AutoStop := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionAutoStop_R(Self: TJvUIBTransaction; var T: boolean);
begin T := Self.AutoStop; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionAutoStart_W(Self: TJvUIBTransaction; const T: boolean);
begin Self.AutoStart := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionAutoStart_R(Self: TJvUIBTransaction; var T: boolean);
begin T := Self.AutoStart; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionAutoRetain_W(Self: TJvUIBTransaction; const T: boolean);
begin Self.AutoRetain := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionAutoRetain_R(Self: TJvUIBTransaction; var T: boolean);
begin T := Self.AutoRetain; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionOnEndTransaction_W(Self: TJvUIBTransaction; const T: TOnEndTransaction);
begin Self.OnEndTransaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionOnEndTransaction_R(Self: TJvUIBTransaction; var T: TOnEndTransaction);
begin T := Self.OnEndTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionOnStartTransaction_W(Self: TJvUIBTransaction; const T: TNotifyEvent);
begin Self.OnStartTransaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionOnStartTransaction_R(Self: TJvUIBTransaction; var T: TNotifyEvent);
begin T := Self.OnStartTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionLockWrite_W(Self: TJvUIBTransaction; const T: string);
begin Self.LockWrite := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionLockWrite_R(Self: TJvUIBTransaction; var T: string);
begin T := Self.LockWrite; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionLockRead_W(Self: TJvUIBTransaction; const T: string);
begin Self.LockRead := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionLockRead_R(Self: TJvUIBTransaction; var T: string);
begin T := Self.LockRead; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionOptions_W(Self: TJvUIBTransaction; const T: TTransParams);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionOptions_R(Self: TJvUIBTransaction; var T: TTransParams);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionDataBase_W(Self: TJvUIBTransaction; const T: TJvUIBDataBase);
begin Self.DataBase := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionDataBase_R(Self: TJvUIBTransaction; var T: TJvUIBDataBase);
begin T := Self.DataBase; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionDatabasesCount_R(Self: TJvUIBTransaction; var T: Integer);
begin T := Self.DatabasesCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionDatabases_R(Self: TJvUIBTransaction; var T: TJvUIBDataBase; const t1: Integer);
begin T := Self.Databases[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionStatementsCount_R(Self: TJvUIBTransaction; var T: Integer);
begin T := Self.StatementsCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionStatements_R(Self: TJvUIBTransaction; var T: TJvUIBStatement; const t1: Integer);
begin T := Self.Statements[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionTrHandle_R(Self: TJvUIBTransaction; var T: IscTrHandle);
begin T := Self.TrHandle; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBTransactionInTransaction_R(Self: TJvUIBTransaction; var T: boolean);
begin T := Self.InTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoUserNames_W(Self: TJvUIBDataBase; const T: TOnInfoStringCount);
begin Self.OnInfoUserNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoUserNames_R(Self: TJvUIBDataBase; var T: TOnInfoStringCount);
begin T := Self.OnInfoUserNames; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoLimbo_W(Self: TJvUIBDataBase; const T: TOnInfoIntegerCount);
begin Self.OnInfoLimbo := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoLimbo_R(Self: TJvUIBDataBase; var T: TOnInfoIntegerCount);
begin T := Self.OnInfoLimbo; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoActiveTransactions_W(Self: TJvUIBDataBase; const T: TOnInfoIntegerCount);
begin Self.OnInfoActiveTransactions := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoActiveTransactions_R(Self: TJvUIBDataBase; var T: TOnInfoIntegerCount);
begin T := Self.OnInfoActiveTransactions; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoExpungeCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoExpungeCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoExpungeCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoExpungeCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoPurgeCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoPurgeCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoPurgeCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoPurgeCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoBackoutCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoBackoutCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoBackoutCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoBackoutCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoDeleteCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoDeleteCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoDeleteCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoDeleteCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoInsertCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoInsertCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoInsertCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoInsertCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoUpdateCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoUpdateCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoUpdateCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoUpdateCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoReadIdxCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoReadIdxCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoReadIdxCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoReadIdxCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoReadSeqCount_W(Self: TJvUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoReadSeqCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnInfoReadSeqCount_R(Self: TJvUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoReadSeqCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseRole_W(Self: TJvUIBDataBase; const T: string);
begin Self.Role := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseRole_R(Self: TJvUIBDataBase; var T: string);
begin T := Self.Role; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseConnected_W(Self: TJvUIBDataBase; const T: boolean);
begin Self.Connected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseConnected_R(Self: TJvUIBDataBase; var T: boolean);
begin T := Self.Connected; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseShutdown_W(Self: TJvUIBDataBase; const T: TShutdownOptions);
begin Self.Shutdown := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseShutdown_R(Self: TJvUIBDataBase; var T: TShutdownOptions);
begin T := Self.Shutdown; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseMetaDataOptions_R(Self: TJvUIBDataBase; var T: TMetaDataOptions);
begin T := Self.MetaDataOptions; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseSegmentSize_W(Self: TJvUIBDataBase; const T: Word);
begin Self.SegmentSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseSegmentSize_R(Self: TJvUIBDataBase; var T: Word);
begin T := Self.SegmentSize; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnConnectionLost_W(Self: TJvUIBDataBase; const T: TNotifyEvent);
begin Self.OnConnectionLost := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseOnConnectionLost_R(Self: TJvUIBDataBase; var T: TNotifyEvent);
begin T := Self.OnConnectionLost; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseBeforeDisconnect_W(Self: TJvUIBDataBase; const T: TNotifyEvent);
begin Self.BeforeDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseBeforeDisconnect_R(Self: TJvUIBDataBase; var T: TNotifyEvent);
begin T := Self.BeforeDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseAfterDisconnect_W(Self: TJvUIBDataBase; const T: TNotifyEvent);
begin Self.AfterDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseAfterDisconnect_R(Self: TJvUIBDataBase; var T: TNotifyEvent);
begin T := Self.AfterDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseBeforeConnect_W(Self: TJvUIBDataBase; const T: TNotifyEvent);
begin Self.BeforeConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseBeforeConnect_R(Self: TJvUIBDataBase; var T: TNotifyEvent);
begin T := Self.BeforeConnect; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseAfterConnect_W(Self: TJvUIBDataBase; const T: TNotifyEvent);
begin Self.AfterConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseAfterConnect_R(Self: TJvUIBDataBase; var T: TNotifyEvent);
begin T := Self.AfterConnect; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseLibraryName_W(Self: TJvUIBDataBase; const T: String);
begin Self.LibraryName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseLibraryName_R(Self: TJvUIBDataBase; var T: String);
begin T := Self.LibraryName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBasePassWord_W(Self: TJvUIBDataBase; const T: string);
begin Self.PassWord := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBasePassWord_R(Self: TJvUIBDataBase; var T: string);
begin T := Self.PassWord; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseUserName_W(Self: TJvUIBDataBase; const T: string);
begin Self.UserName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseUserName_R(Self: TJvUIBDataBase; var T: string);
begin T := Self.UserName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseCharacterSet_W(Self: TJvUIBDataBase; const T: TCharacterSet);
begin Self.CharacterSet := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseCharacterSet_R(Self: TJvUIBDataBase; var T: TCharacterSet);
begin T := Self.CharacterSet; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseSQLDialect_W(Self: TJvUIBDataBase; const T: Integer);
begin Self.SQLDialect := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseSQLDialect_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.SQLDialect; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseDatabaseName_W(Self: TJvUIBDataBase; const T: String);
begin Self.DatabaseName := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseDatabaseName_R(Self: TJvUIBDataBase; var T: String);
begin T := Self.DatabaseName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseParams_W(Self: TJvUIBDataBase; const T: TStrings);
begin Self.Params := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseParams_R(Self: TJvUIBDataBase; var T: TStrings);
begin T := Self.Params; end;

{$IFDEF IB71_UP}
(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoSvrMinVer_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoSvrMinVer; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoAttCharset_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoAttCharset; end;
{$ENDIF}

{$IFDEF IB7_UP}
(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbGroupCommit_R(Self: TJvUIBDataBase; var T: boolean);
begin T := Self.InfoDbGroupCommit; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbMarks_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbMarks; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbFetches_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbFetches; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbWrites_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbWrites; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbReads_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbReads; end;
{$ENDIF}

{$IFDEF FB102ORYF867}
(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoActiveTransactions_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoActiveTransactions; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoFirebirdVersion_R(Self: TJvUIBDataBase; var T: string);
begin T := Self.InfoFirebirdVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoAttCharset_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoAttCharset; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbClass_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbClass; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbProvider_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbProvider; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoNextTransaction_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoNextTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoOldestSnapshot_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoOldestSnapshot; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoOldestActive_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoOldestActive; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoOldestTransaction_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoOldestTransaction; end;
{$ENDIF}

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoUserNames_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoUserNames; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoLimbo_R(Self: TJvUIBDataBase; var T: integer);
begin T := Self.InfoLimbo; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoExpungeCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoExpungeCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoPurgeCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoPurgeCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoBackoutCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoBackoutCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDeleteCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDeleteCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoInsertCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoInsertCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoUpdateCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoUpdateCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoReadIdxCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoReadIdxCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoReadSeqCount_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoReadSeqCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoVersion_R(Self: TJvUIBDataBase; var T: string);
begin T := Self.InfoVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoBaseLevel_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoBaseLevel; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoImplementation_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoImplementation; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbSiteName_R(Self: TJvUIBDataBase; var T: string);
begin T := Self.InfoDbSiteName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbFileName_R(Self: TJvUIBDataBase; var T: string);
begin T := Self.InfoDbFileName; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbSizeInPages_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbSizeInPages; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbReadOnly_R(Self: TJvUIBDataBase; var T: boolean);
begin T := Self.InfoDbReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDbSqlDialect_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDbSqlDialect; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoTPageErrors_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoTPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoPPageErrors_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoPPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoIPageErrors_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoIPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoDPageErrors_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoDPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoRecordErrors_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoRecordErrors; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoBPageErrors_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoBPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoPageErrors_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoForcedWrites_R(Self: TJvUIBDataBase; var T: boolean);
begin T := Self.InfoForcedWrites; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoNoReserve_R(Self: TJvUIBDataBase; var T: boolean);
begin T := Self.InfoNoReserve; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoSweepInterval_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoSweepInterval; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoAllocation_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoAllocation; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoOdsMinorVersion_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoOdsMinorVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoOdsVersion_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoOdsVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoAttachmentId_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoAttachmentId; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoMaxMemory_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoMaxMemory; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoCurrentMemory_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoCurrentMemory; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoSetPageBuffers_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoSetPageBuffers; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoNumBuffers_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoNumBuffers; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoPageSize_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoPageSize; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoMarks_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoMarks; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoFetches_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoFetches; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoWrites_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoWrites; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseInfoReads_R(Self: TJvUIBDataBase; var T: Integer);
begin T := Self.InfoReads; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseLib_R(Self: TJvUIBDataBase; var T: TUIBLibrary);
begin T := Self.Lib; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseTransactionsCount_R(Self: TJvUIBDataBase; var T: Cardinal);
begin T := Self.TransactionsCount; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseTransactions_R(Self: TJvUIBDataBase; var T: TJvUIBTransaction; const t1: Cardinal);
begin T := Self.Transactions[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseIsHandleShared_R(Self: TJvUIBDataBase; var T: boolean);
begin T := Self.IsHandleShared; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseDbHandle_W(Self: TJvUIBDataBase; const T: IscDbHandle);
begin Self.DbHandle := T; end;

(*----------------------------------------------------------------------------*)
procedure TJvUIBDataBaseDbHandle_R(Self: TJvUIBDataBase; var T: IscDbHandle);
begin T := Self.DbHandle; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsSysInfos_W(Self: TMetaDataOptions; const T: boolean);
begin Self.SysInfos := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsSysInfos_R(Self: TMetaDataOptions; var T: boolean);
begin T := Self.SysInfos; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsUDFs_W(Self: TMetaDataOptions; const T: TOIDUDFs);
begin Self.UDFs := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsUDFs_R(Self: TMetaDataOptions; var T: TOIDUDFs);
begin T := Self.UDFs; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsProcedures_W(Self: TMetaDataOptions; const T: TOIDProcedures);
begin Self.Procedures := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsProcedures_R(Self: TMetaDataOptions; var T: TOIDProcedures);
begin T := Self.Procedures; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsViews_W(Self: TMetaDataOptions; const T: TOIDViews);
begin Self.Views := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsViews_R(Self: TMetaDataOptions; var T: TOIDViews);
begin T := Self.Views; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsTables_W(Self: TMetaDataOptions; const T: TOIDTables);
begin Self.Tables := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsTables_R(Self: TMetaDataOptions; var T: TOIDTables);
begin T := Self.Tables; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsObjects_W(Self: TMetaDataOptions; const T: TOIDDatabases);
begin Self.Objects := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsObjects_R(Self: TMetaDataOptions; var T: TOIDDatabases);
begin T := Self.Objects; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBConfig(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBConfig) do
  begin
    RegisterMethod(@TJvUIBConfig.ShutdownDatabase, 'ShutdownDatabase');
    RegisterMethod(@TJvUIBConfig.SetSweepInterval, 'SetSweepInterval');
    RegisterMethod(@TJvUIBConfig.SetDBSqlDialect, 'SetDBSqlDialect');
    RegisterMethod(@TJvUIBConfig.SetPageBuffers, 'SetPageBuffers');
    RegisterMethod(@TJvUIBConfig.ActivateShadow, 'ActivateShadow');
    RegisterMethod(@TJvUIBConfig.BringDatabaseOnline, 'BringDatabaseOnline');
    RegisterMethod(@TJvUIBConfig.SetReserveSpace, 'SetReserveSpace');
    RegisterMethod(@TJvUIBConfig.SetAsyncMode, 'SetAsyncMode');
    RegisterMethod(@TJvUIBConfig.SetReadOnly, 'SetReadOnly');
    RegisterPropertyHelper(@TJvUIBConfigDatabaseName_R,@TJvUIBConfigDatabaseName_W,'DatabaseName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBEventThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBEventThread) do
  begin
    RegisterVirtualConstructor(@TJvUIBEventThread.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBEvents(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBEvents) do
  begin
    RegisterVirtualMethod(@TJvUIBEvents.RegisterEvents, 'RegisterEvents');
    RegisterVirtualMethod(@TJvUIBEvents.UnRegisterEvents, 'UnRegisterEvents');
    RegisterMethod(@TJvUIBEvents.SetAutoRegister, 'SetAutoRegister');
    RegisterPropertyHelper(@TJvUIBEventsAutoRegister_R,@TJvUIBEventsAutoRegister_W,'AutoRegister');
    RegisterPropertyHelper(@TJvUIBEventsDatabase_R,@TJvUIBEventsDatabase_W,'Database');
    RegisterPropertyHelper(@TJvUIBEventsEvents_R,@TJvUIBEventsEvents_W,'Events');
    RegisterPropertyHelper(@TJvUIBEventsRegistered_R,@TJvUIBEventsRegistered_W,'Registered');
    RegisterPropertyHelper(@TJvUIBEventsSyncMainThread_R,@TJvUIBEventsSyncMainThread_W,'SyncMainThread');
    RegisterPropertyHelper(@TJvUIBEventsOnEvent_R,@TJvUIBEventsOnEvent_W,'OnEvent');
    RegisterPropertyHelper(@TJvUIBEventsOnException_R,@TJvUIBEventsOnException_W,'OnException');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBRepair(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBRepair) do
  begin
    RegisterMethod(@TJvUIBRepair.Run, 'Run');
    RegisterPropertyHelper(@TJvUIBRepairOptions_R,@TJvUIBRepairOptions_W,'Options');
    RegisterPropertyHelper(@TJvUIBRepairDatabase_R,@TJvUIBRepairDatabase_W,'Database');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBSecurity(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBSecurity) do
  begin
    RegisterMethod(@TJvUIBSecurity.AddUser, 'AddUser');
    RegisterMethod(@TJvUIBSecurity.DeleteUser, 'DeleteUser');
    RegisterMethod(@TJvUIBSecurity.ModifyUser, 'ModifyUser');
    RegisterMethod(@TJvUIBSecurity.DisplayUser, 'DisplayUser');
    RegisterMethod(@TJvUIBSecurity.DisplayUsers, 'DisplayUsers');
    RegisterPropertyHelper(@TJvUIBSecurityUserInfo_R,nil,'UserInfo');
    RegisterPropertyHelper(@TJvUIBSecurityUserInfoCount_R,nil,'UserInfoCount');
    RegisterPropertyHelper(@TJvUIBSecurityRole_R,@TJvUIBSecurityRole_W,'Role');
    RegisterPropertyHelper(@TJvUIBSecurityUser_R,@TJvUIBSecurityUser_W,'User');
    RegisterPropertyHelper(@TJvUIBSecurityPass_R,@TJvUIBSecurityPass_W,'Pass');
    RegisterPropertyHelper(@TJvUIBSecurityFirstName_R,@TJvUIBSecurityFirstName_W,'FirstName');
    RegisterPropertyHelper(@TJvUIBSecurityMiddleName_R,@TJvUIBSecurityMiddleName_W,'MiddleName');
    RegisterPropertyHelper(@TJvUIBSecurityLastName_R,@TJvUIBSecurityLastName_W,'LastName');
    RegisterPropertyHelper(@TJvUIBSecurityUserID_R,@TJvUIBSecurityUserID_W,'UserID');
    RegisterPropertyHelper(@TJvUIBSecurityGroupID_R,@TJvUIBSecurityGroupID_W,'GroupID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUserInfo(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUserInfo) do
  begin
    RegisterPropertyHelper(@TUserInfoUserName_R,@TUserInfoUserName_W,'UserName');
    RegisterPropertyHelper(@TUserInfoFirstName_R,@TUserInfoFirstName_W,'FirstName');
    RegisterPropertyHelper(@TUserInfoMiddleName_R,@TUserInfoMiddleName_W,'MiddleName');
    RegisterPropertyHelper(@TUserInfoLastName_R,@TUserInfoLastName_W,'LastName');
    RegisterPropertyHelper(@TUserInfoGroupID_R,@TUserInfoGroupID_W,'GroupID');
    RegisterPropertyHelper(@TUserInfoUserID_R,@TUserInfoUserID_W,'UserID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBRestore(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBRestore) do
  begin
    RegisterPropertyHelper(@TJvUIBRestoreOptions_R,@TJvUIBRestoreOptions_W,'Options');
    RegisterPropertyHelper(@TJvUIBRestorePageSize_R,@TJvUIBRestorePageSize_W,'PageSize');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBBackup(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBBackup) do
  begin
    RegisterPropertyHelper(@TJvUIBBackupOptions_R,@TJvUIBBackupOptions_W,'Options');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBBackupRestore(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBBackupRestore) do
  begin
    RegisterMethod(@TJvUIBBackupRestore.Run, 'Run');
    RegisterPropertyHelper(@TJvUIBBackupRestoreBackupFiles_R,@TJvUIBBackupRestoreBackupFiles_W,'BackupFiles');
    RegisterPropertyHelper(@TJvUIBBackupRestoreDatabase_R,@TJvUIBBackupRestoreDatabase_W,'Database');
    RegisterPropertyHelper(@TJvUIBBackupRestoreOnVerbose_R,@TJvUIBBackupRestoreOnVerbose_W,'OnVerbose');
    RegisterPropertyHelper(@TJvUIBBackupRestoreVerbose_R,@TJvUIBBackupRestoreVerbose_W,'Verbose');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBService(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBService) do
  begin
    RegisterPropertyHelper(@TJvUIBServiceUserName_R,@TJvUIBServiceUserName_W,'UserName');
    RegisterPropertyHelper(@TJvUIBServicePassWord_R,@TJvUIBServicePassWord_W,'PassWord');
    RegisterPropertyHelper(@TJvUIBServiceHost_R,@TJvUIBServiceHost_W,'Host');
    RegisterPropertyHelper(@TJvUIBServiceProtocol_R,@TJvUIBServiceProtocol_W,'Protocol');
    RegisterPropertyHelper(@TJvUIBServiceLibraryName_R,@TJvUIBServiceLibraryName_W,'LibraryName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBScript(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBScript) do
  begin
    RegisterMethod(@TJvUIBScript.ExecuteScript, 'ExecuteScript');
    RegisterPropertyHelper(@TJvUIBScriptTransaction_R,@TJvUIBScriptTransaction_W,'Transaction');
    RegisterPropertyHelper(@TJvUIBScriptScript_R,@TJvUIBScriptScript_W,'Script');
    RegisterPropertyHelper(@TJvUIBScriptAutoDDL_R,@TJvUIBScriptAutoDDL_W,'AutoDDL');
    RegisterPropertyHelper(@TJvUIBScriptOnParse_R,@TJvUIBScriptOnParse_W,'OnParse');
    RegisterPropertyHelper(@TJvUIBScriptOnComment_R,@TJvUIBScriptOnComment_W,'OnComment');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBQuery(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBQuery) do
  begin
    RegisterMethod(@TJvUIBQuery.BuildStoredProc, 'BuildStoredProc');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBStatement(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBStatement) do
  begin
    RegisterVirtualMethod(@TJvUIBStatement.Close, 'Close');
    RegisterMethod(@TJvUIBStatement.CloseCursor, 'CloseCursor');
    RegisterMethod(@TJvUIBStatement.FetchAll, 'FetchAll');
    RegisterMethod(@TJvUIBStatement.Open, 'Open');
    RegisterMethod(@TJvUIBStatement.Prepare, 'Prepare');
    RegisterMethod(@TJvUIBStatement.Execute, 'Execute');
    RegisterMethod(@TJvUIBStatement.ExecSQL, 'ExecSQL');
    RegisterMethod(@TJvUIBStatement.Next, 'Next');
    RegisterMethod(@TJvUIBStatement.Prior, 'Prior');
    RegisterMethod(@TJvUIBStatement.Last, 'Last');
    RegisterMethod(@TJvUIBStatement.First, 'First');
    RegisterMethod(@TJvUIBStatementOverload.ReadBlobStream, 'ReadBlobStream');
    RegisterMethod(@TJvUIBStatementOverload.ReadBlobString, 'ReadBlobString');
    RegisterMethod(@TJvUIBStatementOverload.ReadBlobVariant, 'ReadBlobVariant');
    RegisterMethod(@TJvUIBStatementOverload.ReadBlobNameStream, 'ReadBlobNameStream');
    RegisterMethod(@TJvUIBStatementOverload.ReadBlobNameString, 'ReadBlobNameString');
    RegisterMethod(@TJvUIBStatementOverload.ReadBlobNameVariant, 'ReadBlobNameVariant');
    RegisterMethod(@TJvUIBStatementOverload.ParamsSetBlobStream, 'ParamsSetBlobStream');
    RegisterMethod(@TJvUIBStatementOverload.ParamsSetBlobString, 'ParamsSetBlobString');
    RegisterMethod(@TJvUIBStatementOverload.ParamsSetBlobNameStream, 'ParamsSetBlobNameStream');
    RegisterMethod(@TJvUIBStatementOverload.ParamsSetBlobNameString, 'ParamsSetBlobNameString');
    RegisterMethod(@TJvUIBStatement.FieldBlobSize, 'FieldBlobSize');
    RegisterMethod(@TJvUIBStatement.ParamBlobSize, 'ParamBlobSize');
    RegisterPropertyHelper(@TJvUIBStatementStHandle_R,nil,'StHandle');
    RegisterPropertyHelper(@TJvUIBStatementFields_R,nil,'Fields');
    RegisterPropertyHelper(@TJvUIBStatementParams_R,nil,'Params');
    RegisterPropertyHelper(@TJvUIBStatementCursorName_R,nil,'CursorName');
    RegisterPropertyHelper(@TJvUIBStatementCurrentState_R,nil,'CurrentState');
    RegisterPropertyHelper(@TJvUIBStatementEof_R,nil,'Eof');
    RegisterPropertyHelper(@TJvUIBStatementBof_R,nil,'Bof');
    RegisterPropertyHelper(@TJvUIBStatementParseParams_R,@TJvUIBStatementParseParams_W,'ParseParams');
    RegisterPropertyHelper(@TJvUIBStatementPlan_R,nil,'Plan');
    RegisterPropertyHelper(@TJvUIBStatementStatementType_R,nil,'StatementType');
    RegisterPropertyHelper(@TJvUIBStatementRowsAffected_R,nil,'RowsAffected');
    RegisterPropertyHelper(@TJvUIBStatementUseCursor_R,@TJvUIBStatementUseCursor_W,'UseCursor');
    RegisterPropertyHelper(@TJvUIBStatementSQL_R,@TJvUIBStatementSQL_W,'SQL');
    RegisterPropertyHelper(@TJvUIBStatementTransaction_R,@TJvUIBStatementTransaction_W,'Transaction');
    RegisterPropertyHelper(@TJvUIBStatementDataBase_R,@TJvUIBStatementDataBase_W,'DataBase');
    RegisterPropertyHelper(@TJvUIBStatementOnError_R,@TJvUIBStatementOnError_W,'OnError');
    RegisterPropertyHelper(@TJvUIBStatementCachedFetch_R,@TJvUIBStatementCachedFetch_W,'CachedFetch');
    RegisterPropertyHelper(@TJvUIBStatementFetchBlobs_R,@TJvUIBStatementFetchBlobs_W,'FetchBlobs');
    RegisterPropertyHelper(@TJvUIBStatementBufferChunks_R,@TJvUIBStatementBufferChunks_W,'BufferChunks');
    RegisterPropertyHelper(@TJvUIBStatementOnClose_R,@TJvUIBStatementOnClose_W,'OnClose');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBTransaction(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBTransaction) do
  begin
    RegisterMethod(@TJvUIBTransaction.AddDataBase, 'AddDataBase');
    RegisterMethod(@TJvUIBTransactionOverload.RemoveDatabaseByClass, 'RemoveDatabaseByClass');
    RegisterMethod(@TJvUIBTransactionOverload.RemoveDatabaseByIndex, 'RemoveDatabaseByIndex');
    RegisterMethod(@TJvUIBTransaction.StartTransaction, 'StartTransaction');
    RegisterMethod(@TJvUIBTransaction.Commit, 'Commit');
    RegisterMethod(@TJvUIBTransaction.CommitRetaining, 'CommitRetaining');
    RegisterMethod(@TJvUIBTransaction.RollBack, 'RollBack');
    RegisterMethod(@TJvUIBTransaction.RollBackRetaining, 'RollBackRetaining');
    RegisterMethod(@TJvUIBTransaction.ExecuteImmediate, 'ExecuteImmediate');
{$IFDEF IB71_UP}
    RegisterMethod(@TJvUIBTransaction.SavepointRelease, 'SavepointRelease');
    RegisterMethod(@TJvUIBTransaction.SavepointRollback, 'SavepointRollback');
    RegisterMethod(@TJvUIBTransaction.SavepointStart, 'SavepointStart');
{$ENDIF}
    RegisterPropertyHelper(@TJvUIBTransactionInTransaction_R,nil,'InTransaction');
    RegisterPropertyHelper(@TJvUIBTransactionTrHandle_R,nil,'TrHandle');
    RegisterPropertyHelper(@TJvUIBTransactionStatements_R,nil,'Statements');
    RegisterPropertyHelper(@TJvUIBTransactionStatementsCount_R,nil,'StatementsCount');
    RegisterPropertyHelper(@TJvUIBTransactionDatabases_R,nil,'Databases');
    RegisterPropertyHelper(@TJvUIBTransactionDatabasesCount_R,nil,'DatabasesCount');
    RegisterPropertyHelper(@TJvUIBTransactionDataBase_R,@TJvUIBTransactionDataBase_W,'DataBase');
    RegisterPropertyHelper(@TJvUIBTransactionOptions_R,@TJvUIBTransactionOptions_W,'Options');
    RegisterPropertyHelper(@TJvUIBTransactionLockRead_R,@TJvUIBTransactionLockRead_W,'LockRead');
    RegisterPropertyHelper(@TJvUIBTransactionLockWrite_R,@TJvUIBTransactionLockWrite_W,'LockWrite');
    RegisterPropertyHelper(@TJvUIBTransactionOnStartTransaction_R,@TJvUIBTransactionOnStartTransaction_W,'OnStartTransaction');
    RegisterPropertyHelper(@TJvUIBTransactionOnEndTransaction_R,@TJvUIBTransactionOnEndTransaction_W,'OnEndTransaction');
    RegisterPropertyHelper(@TJvUIBTransactionAutoRetain_R,@TJvUIBTransactionAutoRetain_W,'AutoRetain');
    RegisterPropertyHelper(@TJvUIBTransactionAutoStart_R,@TJvUIBTransactionAutoStart_W,'AutoStart');
    RegisterPropertyHelper(@TJvUIBTransactionAutoStop_R,@TJvUIBTransactionAutoStop_W,'AutoStop');
    RegisterPropertyHelper(@TJvUIBTransactionDefaultAction_R,@TJvUIBTransactionDefaultAction_W,'DefaultAction');
{$IFDEF FB20_UP}
    RegisterPropertyHelper(@TJvUIBTransactionLockTimeout_R,@TJvUIBTransactionLockTimeout_W,'LockTimeout');
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBDataBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBDataBase) do
  begin
    RegisterMethod(@TJvUIBDataBase.ExecuteImmediate, 'ExecuteImmediate');
    RegisterMethod(@TJvUIBDataBase.ClearExceptions, 'ClearExceptions');
    RegisterMethod(@TJvUIBDatabaseOverload.RegisterExceptionByID, 'RegisterExceptionByID');
    RegisterMethod(@TJvUIBDatabaseOverload.RegisterExceptionByName, 'RegisterExceptionByName');
    RegisterMethod(@TJvUIBDataBase.UnRegisterException, 'UnRegisterException');
    RegisterMethod(@TJvUIBDataBase.UnRegisterExceptions, 'UnRegisterExceptions');
    RegisterMethod(@TJvUIBDataBase.CreateDatabase, 'CreateDatabase');
    RegisterMethod(@TJvUIBDataBase.GetMetadata, 'GetMetadata');
    RegisterMethod(@TJvUIBDataBase.ActiveAllTriggers, 'ActiveAllTriggers');
    RegisterMethod(@TJvUIBDataBase.DeactiveAllTriggers, 'DeactiveAllTriggers');
    RegisterMethod(@TJvUIBDataBase.RecomputeSelectivityIndices, 'RecomputeSelectivityIndices');
    RegisterMethod(@TJvUIBDataBase.RecompileAllProcedures, 'RecompileAllProcedures');
    RegisterMethod(@TJvUIBDataBase.RecompileAllTriggers, 'RecompileAllTriggers');
    RegisterPropertyHelper(@TJvUIBDataBaseDbHandle_R,@TJvUIBDataBaseDbHandle_W,'DbHandle');
    RegisterPropertyHelper(@TJvUIBDataBaseIsHandleShared_R,nil,'IsHandleShared');
    RegisterPropertyHelper(@TJvUIBDataBaseTransactions_R,nil,'Transactions');
    RegisterPropertyHelper(@TJvUIBDataBaseTransactionsCount_R,nil,'TransactionsCount');
    RegisterPropertyHelper(@TJvUIBDataBaseLib_R,nil,'Lib');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoReads_R,nil,'InfoReads');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoWrites_R,nil,'InfoWrites');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoFetches_R,nil,'InfoFetches');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoMarks_R,nil,'InfoMarks');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoPageSize_R,nil,'InfoPageSize');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoNumBuffers_R,nil,'InfoNumBuffers');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoSetPageBuffers_R,nil,'InfoSetPageBuffers');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoCurrentMemory_R,nil,'InfoCurrentMemory');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoMaxMemory_R,nil,'InfoMaxMemory');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoAttachmentId_R,nil,'InfoAttachmentId');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoOdsVersion_R,nil,'InfoOdsVersion');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoOdsMinorVersion_R,nil,'InfoOdsMinorVersion');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoAllocation_R,nil,'InfoAllocation');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoSweepInterval_R,nil,'InfoSweepInterval');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoNoReserve_R,nil,'InfoNoReserve');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoForcedWrites_R,nil,'InfoForcedWrites');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoPageErrors_R,nil,'InfoPageErrors');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoBPageErrors_R,nil,'InfoBPageErrors');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoRecordErrors_R,nil,'InfoRecordErrors');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDPageErrors_R,nil,'InfoDPageErrors');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoIPageErrors_R,nil,'InfoIPageErrors');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoPPageErrors_R,nil,'InfoPPageErrors');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoTPageErrors_R,nil,'InfoTPageErrors');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbSqlDialect_R,nil,'InfoDbSqlDialect');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbReadOnly_R,nil,'InfoDbReadOnly');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbSizeInPages_R,nil,'InfoDbSizeInPages');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbFileName_R,nil,'InfoDbFileName');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbSiteName_R,nil,'InfoDbSiteName');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoImplementation_R,nil,'InfoImplementation');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoBaseLevel_R,nil,'InfoBaseLevel');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoVersion_R,nil,'InfoVersion');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoReadSeqCount_R,nil,'InfoReadSeqCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoReadIdxCount_R,nil,'InfoReadIdxCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoUpdateCount_R,nil,'InfoUpdateCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoInsertCount_R,nil,'InfoInsertCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDeleteCount_R,nil,'InfoDeleteCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoBackoutCount_R,nil,'InfoBackoutCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoPurgeCount_R,nil,'InfoPurgeCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoExpungeCount_R,nil,'InfoExpungeCount');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoLimbo_R,nil,'InfoLimbo');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoUserNames_R,nil,'InfoUserNames');
{$IFDEF FB102ORYF867}
    RegisterPropertyHelper(@TJvUIBDataBaseInfoOldestTransaction_R,nil,'InfoOldestTransaction');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoOldestActive_R,nil,'InfoOldestActive');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoOldestSnapshot_R,nil,'InfoOldestSnapshot');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoNextTransaction_R,nil,'InfoNextTransaction');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbProvider_R,nil,'InfoDbProvider');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbClass_R,nil,'InfoDbClass');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoAttCharset_R,nil,'InfoAttCharset');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoFirebirdVersion_R,nil,'InfoFirebirdVersion');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoActiveTransactions_R,nil,'InfoActiveTransactions');
{$ENDIF}
{$IFDEF IB7_UP}
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbReads_R,nil,'InfoDbReads');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbWrites_R,nil,'InfoDbWrites');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbFetches_R,nil,'InfoDbFetches');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbMarks_R,nil,'InfoDbMarks');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoDbGroupCommit_R,nil,'InfoDbGroupCommit');
{$ENDIF}
{$IFDEF IB71_UP}
    RegisterPropertyHelper(@TJvUIBDataBaseInfoAttCharset_R,nil,'InfoAttCharset');
    RegisterPropertyHelper(@TJvUIBDataBaseInfoSvrMinVer_R,nil,'InfoSvrMinVer');
{$ENDIF}
    RegisterPropertyHelper(@TJvUIBDataBaseParams_R,@TJvUIBDataBaseParams_W,'Params');
    RegisterPropertyHelper(@TJvUIBDataBaseDatabaseName_R,@TJvUIBDataBaseDatabaseName_W,'DatabaseName');
    RegisterPropertyHelper(@TJvUIBDataBaseSQLDialect_R,@TJvUIBDataBaseSQLDialect_W,'SQLDialect');
    RegisterPropertyHelper(@TJvUIBDataBaseCharacterSet_R,@TJvUIBDataBaseCharacterSet_W,'CharacterSet');
    RegisterPropertyHelper(@TJvUIBDataBaseUserName_R,@TJvUIBDataBaseUserName_W,'UserName');
    RegisterPropertyHelper(@TJvUIBDataBasePassWord_R,@TJvUIBDataBasePassWord_W,'PassWord');
    RegisterPropertyHelper(@TJvUIBDataBaseLibraryName_R,@TJvUIBDataBaseLibraryName_W,'LibraryName');
    RegisterPropertyHelper(@TJvUIBDataBaseAfterConnect_R,@TJvUIBDataBaseAfterConnect_W,'AfterConnect');
    RegisterPropertyHelper(@TJvUIBDataBaseBeforeConnect_R,@TJvUIBDataBaseBeforeConnect_W,'BeforeConnect');
    RegisterPropertyHelper(@TJvUIBDataBaseAfterDisconnect_R,@TJvUIBDataBaseAfterDisconnect_W,'AfterDisconnect');
    RegisterPropertyHelper(@TJvUIBDataBaseBeforeDisconnect_R,@TJvUIBDataBaseBeforeDisconnect_W,'BeforeDisconnect');
    RegisterPropertyHelper(@TJvUIBDataBaseOnConnectionLost_R,@TJvUIBDataBaseOnConnectionLost_W,'OnConnectionLost');
    RegisterPropertyHelper(@TJvUIBDataBaseSegmentSize_R,@TJvUIBDataBaseSegmentSize_W,'SegmentSize');
    RegisterPropertyHelper(@TJvUIBDataBaseMetaDataOptions_R,nil,'MetaDataOptions');
    RegisterPropertyHelper(@TJvUIBDataBaseShutdown_R,@TJvUIBDataBaseShutdown_W,'Shutdown');
    RegisterPropertyHelper(@TJvUIBDataBaseConnected_R,@TJvUIBDataBaseConnected_W,'Connected');
    RegisterPropertyHelper(@TJvUIBDataBaseRole_R,@TJvUIBDataBaseRole_W,'Role');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoReadSeqCount_R,@TJvUIBDataBaseOnInfoReadSeqCount_W,'OnInfoReadSeqCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoReadIdxCount_R,@TJvUIBDataBaseOnInfoReadIdxCount_W,'OnInfoReadIdxCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoUpdateCount_R,@TJvUIBDataBaseOnInfoUpdateCount_W,'OnInfoUpdateCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoInsertCount_R,@TJvUIBDataBaseOnInfoInsertCount_W,'OnInfoInsertCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoDeleteCount_R,@TJvUIBDataBaseOnInfoDeleteCount_W,'OnInfoDeleteCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoBackoutCount_R,@TJvUIBDataBaseOnInfoBackoutCount_W,'OnInfoBackoutCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoPurgeCount_R,@TJvUIBDataBaseOnInfoPurgeCount_W,'OnInfoPurgeCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoExpungeCount_R,@TJvUIBDataBaseOnInfoExpungeCount_W,'OnInfoExpungeCount');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoActiveTransactions_R,@TJvUIBDataBaseOnInfoActiveTransactions_W,'OnInfoActiveTransactions');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoLimbo_R,@TJvUIBDataBaseOnInfoLimbo_W,'OnInfoLimbo');
    RegisterPropertyHelper(@TJvUIBDataBaseOnInfoUserNames_R,@TJvUIBDataBaseOnInfoUserNames_W,'OnInfoUserNames');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaDataOptions(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaDataOptions) do
  begin
    RegisterConstructor(@TMetaDataOptions.Create, 'Create');
    RegisterPropertyHelper(@TMetaDataOptionsObjects_R,@TMetaDataOptionsObjects_W,'Objects');
    RegisterPropertyHelper(@TMetaDataOptionsTables_R,@TMetaDataOptionsTables_W,'Tables');
    RegisterPropertyHelper(@TMetaDataOptionsViews_R,@TMetaDataOptionsViews_W,'Views');
    RegisterPropertyHelper(@TMetaDataOptionsProcedures_R,@TMetaDataOptionsProcedures_W,'Procedures');
    RegisterPropertyHelper(@TMetaDataOptionsUDFs_R,@TMetaDataOptionsUDFs_W,'UDFs');
    RegisterPropertyHelper(@TMetaDataOptionsSysInfos_R,@TMetaDataOptionsSysInfos_W,'SysInfos');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJvUIBComponent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJvUIBComponent) do
  begin
{$IFDEF UIBTHREADSAFE}
    RegisterVirtualMethod(@TJvUIBComponent.Lock, 'Lock');
    RegisterVirtualMethod(@TJvUIBComponent.UnLock, 'UnLock');
{$ENDIF}
{$IFDEF UIB_NO_COMPONENT}
    RegisterVirtualConstructor(@TJvUIBComponent.Create, 'Create');
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_jvuib(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TJvUIBComponent(CL);
  with CL.Add(TJvUIBTransaction) do
  with CL.Add(TJvUIBQuery) do
  with CL.Add(TJvUIBStatement) do
  with CL.Add(TJvUIBDataBase) do
  with CL.Add(TJvUIBEvents) do
  RIRegister_TMetaDataOptions(CL);
  RIRegister_TJvUIBDataBase(CL);
  RIRegister_TJvUIBTransaction(CL);
  RIRegister_TJvUIBStatement(CL);
  RIRegister_TJvUIBQuery(CL);
  RIRegister_TJvUIBScript(CL);
  RIRegister_TJvUIBService(CL);
  RIRegister_TJvUIBBackupRestore(CL);
  RIRegister_TJvUIBBackup(CL);
  RIRegister_TJvUIBRestore(CL);
  RIRegister_TUserInfo(CL);
  RIRegister_TJvUIBSecurity(CL);
  RIRegister_TJvUIBRepair(CL);
  with CL.Add(TJvUIBEventThread) do
  RIRegister_TJvUIBEvents(CL);
  RIRegister_TJvUIBEventThread(CL);
  RIRegister_TJvUIBConfig(CL);
end;

 
 
{ TPSImport_jvuib }
(*----------------------------------------------------------------------------*)
procedure TPSImport_jvuib.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_jvuib(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_jvuib.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_jvuib(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
{ TJvUIBStatementOverload }

procedure TJvUIBStatementOverload.ParamsSetBlobNameStream(
  const Name: string; Stream: TStream);
begin
  ParamsSetBlob(Name, Stream);
end;

procedure TJvUIBStatementOverload.ParamsSetBlobNameString(
  const Name: string; var str: string);
begin
  ParamsSetBlob(Name, str);
end;

procedure TJvUIBStatementOverload.ParamsSetBlobStream(const Index: Word;
  Stream: TStream);
begin
  ParamsSetBlob(Index, Stream);
end;

procedure TJvUIBStatementOverload.ParamsSetBlobString(const Index: Word;
  var str: string);
begin
  ParamsSetBlob(Index, str);
end;

procedure TJvUIBStatementOverload.ReadBlobNameStream(const name: string;
  Stream: TStream);
begin
  ReadBlob(name, Stream);
end;

procedure TJvUIBStatementOverload.ReadBlobNameString(const name: string;
  var str: string);
begin
  ReadBlob(name, str);
end;

procedure TJvUIBStatementOverload.ReadBlobNameVariant(const name: string;
  var Value: Variant);
begin
  ReadBlob(name, Value);
end;

procedure TJvUIBStatementOverload.ReadBlobStream(const Index: Word;
  Stream: TStream);
begin
  ReadBlob(index, Stream);
end;

procedure TJvUIBStatementOverload.ReadBlobString(const Index: Word;
  var str: string);
begin
  ReadBlob(index, str);
end;

procedure TJvUIBStatementOverload.ReadBlobVariant(const Index: Word;
  var Value: Variant);
begin
  ReadBlob(index, Value);
end;

{ TJvUIBDatabaseOverload }

procedure TJvUIBDatabaseOverload.RegisterExceptionByID(
  Excpt: EUIBExceptionClass; ID: Integer);
begin
  RegisterException(Excpt, ID);
end;

function TJvUIBDatabaseOverload.RegisterExceptionByName(
  Excpt: EUIBExceptionClass; const Name: string): Integer;
begin
  Result := RegisterException(Excpt, Name);
end;

{ TJvUIBTransactionOverload }

procedure TJvUIBTransactionOverload.RemoveDatabaseByClass(
  ADataBase: TJvUIBDataBase);
begin
  RemoveDatabase(ADataBase);
end;

procedure TJvUIBTransactionOverload.RemoveDatabaseByIndex(Index: Integer);
begin
  RemoveDatabase(Index);
end;

end.
